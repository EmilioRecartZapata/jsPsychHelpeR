}
# Set up marginal histograms
x_hist <- marginal_distribution(df, "MDDF_DisgustoMoralDumbfounding_DIRd")
y_hist <- marginal_distribution(df, "CRS_Ideologica_DIRd") +
coord_flip()
# Align histograms with scatterplot
aligned_x_hist <- align_plots(x_hist, scatterplot, align = "v")[[1]]
aligned_y_hist <- align_plots(y_hist, scatterplot, align = "h")[[1]]
# Arrange plots
cowplot::plot_grid(
aligned_x_hist, NULL, scatterplot, aligned_y_hist,
ncol = 2, nrow = 2,
rel_heights = c(0.2, 1), rel_widths = c(1, 0.2)
)
RColorBrewer::display.brewer.all(n = 3,
type = "seq", # Colores secuenciales
exact.n = FALSE,
colorblindFriendly = TRUE)
fit_res <- augment(fit)
ggplot(fit_res, aes(x = .fitted, y = .resid)) + geom_point()
ggplot(fit_res, aes(x = .fitted, y = .resid)) + geom_point() + geom_
ggplot(fit_res, aes(x = .fitted, y = .resid)) + geom_point() + geom_abline()
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
df %>%
select(MDDF_DisgustoMoralDumbfounding_DIRd, CRS_Ideologica_DIRd) %>%
tbl_summary()
ggplot(fit_res, aes(x = .fitted, y = .resid)) + geom_point() + geom_abline()
devtools::install_github("goodekat/ggResidpanel")
install.packages("devtools")
library(devtools)
devtools::install_github("goodekat/ggResidpanel")
library(ggResidpanel)
devtools::install_github("goodekat/ggResidpanel")
library(ggResidpanel)
resid_panel(fit)
resid_panel(fit, plots = 'all')
resid_panel(fit)
resid_panel(fit)[1]
resid_panel(fit)[1]
residuals_plot <- resid_panel(fit)
residuals_plot[1]
plot(residuals_plot)
cowplot::plot_grid(scatter, plot2, plot3)
cowplot::plot_grid(scatter, plot2, plot3)
scatterplot = ggplot(df, aes(MDDF_DisgustoMoralDumbfounding_DIRd, CRS_Ideologica_DIRd)) +
geom_point() +
geom_smooth(method  = "lm") + labs(
title = "Fit Regression", x = 'Moral Dumbfounding',
y = 'Ideological CRS'
)
cowplot::plot_grid(scatterplot, plot2, plot3)
plot(residuals_plot)
plot(residuals_plot[1])
plot(residuals_plot(1))
plot(residuals_plot)[1]
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
df %>%
select(MDDF_DisgustoMoralDumbfounding_DIRd, CRS_Ideologica_DIRd) %>%
tbl_summary()
table_model1 = gtsummary::tbl_regression(fit, intercept = TRUE) |>
add_global_p() |>
bold_labels() |>
italicize_levels() |>
add_glance_table(include = c("nobs", "df.residual", "r.squared", "adj.r.squared"))
table_model1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
add_q() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
add_p() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
add_p() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
add_q() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
plot(residuals_plot)
residuals_plot <- resid_panel(fit)
plot(residuals_plot)
############ TABLAS GRAFICAS ####################################
# DEMOGRAPHIC
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
if(!require("ggResidpanel") devtools::install_github("goodekat/ggResidpanel"); library('ggpubr'))
# Lista de paquetes CRAN a instalar y cargar
packages <- c(
"cowplot", "dplyr", "esquisse", "gapminder", "geomtextpath", "gghighlight",
"ggplot2", "ggrain", "ggthemes", "ggridges", "ggtext", "knitr", "plotly",
"purrr", "readr", "sjPlot", "tidyr", "psych", "ggpubr", "rstatix",
"devtools", "afex", "correlation", "corrr", "gtsummary", "haven",
"inspectdf", "lme4", "papaja", "parameters", "performance", "report"
)
# Instalar y cargar paquetes CRAN
for (pkg in unique(packages)) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg)
library(pkg, character.only = TRUE)
}
}
# Instalar y cargar paquete desde GitHub
if (!require("ggResidpanel")) {
if (!require("devtools")) install.packages("devtools")
devtools::install_github("goodekat/ggResidpanel")
library("ggResidpanel")
}
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('esquisse')) install.packages('esquisse'); library('esquisse')
if (!require('gapminder')) install.packages('gapminder'); library('gapminder')
if (!require('geomtextpath')) install.packages('geomtextpath'); library('geomtextpath')
if (!require('gghighlight')) install.packages('gghighlight'); library('gghighlight')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggrain')) install.packages('ggrain'); library('ggrain')
if (!require('ggthemes')) install.packages('ggthemes'); library('ggthemes')
if (!require('ggridges')) install.packages('ggridges'); library('ggridges')
if (!require('ggtext')) install.packages('ggtext'); library('ggtext')
if (!require('knitr')) install.packages('knitr'); library('knitr')
if (!require('plotly')) install.packages('plotly'); library('plotly')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('readr')) install.packages('readr'); library('readr')
if (!require('sjPlot')) install.packages('sjPlot'); library('sjPlot')
if (!require('tidyr')) install.packages('tidyr'); library('tidyr')
if (!require('psych')) install.packages('psych'); library('psych')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')
if (!require('rstatix')) install.packages('rstatix'); library('rstatix')
if (!require('devtools')) install.packages('devtools'); library('devtools')
# Para ggResidpanel desde GitHub
if (!require('ggResidpanel')) {
devtools::install_github('goodekat/ggResidpanel')
library('ggResidpanel')
}
if (!require('afex')) install.packages('afex'); library('afex')
if (!require('correlation')) install.packages('correlation'); library('correlation')
if (!require('corrr')) install.packages('corrr'); library('corrr')
if (!require('gtsummary')) install.packages('gtsummary'); library('gtsummary')
if (!require('haven')) install.packages('haven'); library('haven')
if (!require('inspectdf')) install.packages('inspectdf'); library('inspectdf')
if (!require('lme4')) install.packages('lme4'); library('lme4')
if (!require('papaja')) install.packages('papaja'); library('papaja')
if (!require('parameters')) install.packages('parameters'); library('parameters')
if (!require('performance')) install.packages('performance'); library('performance')
if (!require('report')) install.packages('report'); library('report')
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('esquisse')) install.packages('esquisse'); library('esquisse')
if (!require('gapminder')) install.packages('gapminder'); library('gapminder')
if (!require('geomtextpath')) install.packages('geomtextpath'); library('geomtextpath')
if (!require('gghighlight')) install.packages('gghighlight'); library('gghighlight')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggrain')) install.packages('ggrain'); library('ggrain')
if (!require('ggthemes')) install.packages('ggthemes'); library('ggthemes')
if (!require('ggridges')) install.packages('ggridges'); library('ggridges')
if (!require('ggtext')) install.packages('ggtext'); library('ggtext')
if (!require('knitr')) install.packages('knitr'); library('knitr')
if (!require('plotly')) install.packages('plotly'); library('plotly')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('readr')) install.packages('readr'); library('readr')
if (!require('sjPlot')) install.packages('sjPlot'); library('sjPlot')
if (!require('tidyr')) install.packages('tidyr'); library('tidyr')
if (!require('psych')) install.packages('psych'); library('psych')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')
if (!require('rstatix')) install.packages('rstatix'); library('rstatix')
if (!require('devtools')) install.packages('devtools'); library('devtools')
# Para ggResidpanel desde GitHub
if (!require('ggResidpanel')) {
devtools::install_github('goodekat/ggResidpanel')
library('ggResidpanel')
}
if (!require('afex')) install.packages('afex'); library('afex')
if (!require('correlation')) install.packages('correlation'); library('correlation')
if (!require('corrr')) install.packages('corrr'); library('corrr')
if (!require('gtsummary')) install.packages('gtsummary'); library('gtsummary')
if (!require('haven')) install.packages('haven'); library('haven')
if (!require('inspectdf')) install.packages('inspectdf'); library('inspectdf')
if (!require('lme4')) install.packages('lme4'); library('lme4')
if (!require('papaja')) install.packages('papaja'); library('papaja')
if (!require('parameters')) install.packages('parameters'); library('parameters')
if (!require('performance')) install.packages('performance'); library('performance')
if (!require('report')) install.packages('report'); library('report')
# knitr::opts_chunk$set(echo = TRUE)
# DEBUG
# Makes sure all libraries and functions are available to work interactivelly
# targets::tar_load_globals() # Loads all libraries
# Loads DF_analysis
targets::tar_load(DF_analysis)
#HELLO WORLD
# In this document you will find a template to run analysis, plots, and tables
# You will need to adapt to the contents of your DF_analysis
# names(DF_analysis$DF_analysis) # Show variable names in DF_analysis
View(DF_analysis)
DF =
DF_analysis$DF_analysis %>%
# Update with your variable names
select(id, ends_with("_DIRd"), ends_with("_DIRt"))
# Continue your data preparation, if needed
#   filter() %>%
#   drop_na()
View(DF)
# You can add a variable to the `by` argument and uncomment
# names(DF) shows the variables you hava available
table1 = DF |>
dplyr::select(where(is.numeric), -id, -Goodbye_DIRt) |>
gtsummary::tbl_summary(
# by = AIM_DIRt,
type = list(everything() ~ 'continuous')
)
table1
table1 <- DF %>%
select(-c(Goodbye_DIRt, id, Consent_DIRt)) %>%
gtsummary::tbl_summary(
type = list(everything() ~ "continuous")
)
table1
plot1 =
DF %>%
ggplot(aes(EAR_DIRt, IRI_TomaPerspectiva_DIRd)) +
geom_jitter() +
geom_smooth(method = "lm")
plot1
scatterplot = ggplot(df, aes(MDDF_DisgustoMoralDumbfounding_DIRd, CRS_Ideologica_DIRd)) +
geom_point() +
geom_smooth(method  = "lm") + labs(
title = "Fit Regression", x = 'Moral Dumbfounding',
y = 'Ideological CRS'
)
plot2 <- ggplot(df, aes(MDDF_DisgustoMoralDumbfounding_DIRd, , fill = "PuBuGn")) +
geom_histogram(, bins = 7, alpha = .5) +
guides(fill = 'none') +
labs(x = "Disgusto Moral Dumbfounding",
y ='Frecuencia', title ='Distribución')
plot3 <- ggplot(df, aes(CRS_Ideologica_DIRd, , fill = "YIOrRd")) +
geom_histogram(, bins = 7, alpha = .5) +
guides(fill = 'none') +
labs(x = "Ideological",
y ='Frecuencia', title ='Distribución')
plot3 <- ggplot(df, aes(CRS_Ideologica_DIRd, , fill = "YIOrRd")) +
geom_histogram(, bins = 7, alpha = .5) +
guides(fill = 'none') +
labs(x = "Ideological",
y ='Frecuencia', title ='Distribución')
# Define marginal histogram
marginal_distribution <- function(x, var) {
ggplot(x, aes(x = get(var), fill = "YIOrRd")) +
geom_histogram(bins = 7, alpha = 0.4) +
# geom_density(alpha = 0.4, size = 0.1) +
guides(fill = "none") +
theme_void() +
theme(plot.margin = margin())
}
# Set up marginal histograms
x_hist <- marginal_distribution(df, "MDDF_DisgustoMoralDumbfounding_DIRd")
y_hist <- marginal_distribution(df, "CRS_Ideologica_DIRd") +
coord_flip()
# Align histograms with scatterplot
aligned_x_hist <- align_plots(x_hist, scatterplot, align = "v")[[1]]
aligned_y_hist <- align_plots(y_hist, scatterplot, align = "h")[[1]]
# Arrange plots
cowplot::plot_grid(
aligned_x_hist, NULL, scatterplot, aligned_y_hist,
ncol = 2, nrow = 2,
rel_heights = c(0.2, 1), rel_widths = c(1, 0.2)
)
cowplot::plot_grid(scatterplot, plot2, plot3)
# Arrange plots
cowplot::plot_grid(
aligned_x_hist, NULL, scatterplot, aligned_y_hist,
ncol = 2, nrow = 2,
rel_heights = c(0.2, 1), rel_widths = c(1, 0.2)
)
# Continue your data preparation, if needed
#   filter() %>%
#   drop_na()
df= DF
fit <- lm(MDDF_DisgustoMoralDumbfounding_DIRd ~ CRS_Ideologica_DIRd, data = df)
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
paste0("CRS_Ideological was not a significant predictor of EAR",
", beta = ",
gtsummary::inline_text(table_1, variable = CRS_Ideologica_DIRd))
resid_panel(fit)
# Chunk 1
if (!require('cowplot')) install.packages('cowplot'); library('cowplot')
if (!require('dplyr')) install.packages('dplyr'); library('dplyr')
if (!require('esquisse')) install.packages('esquisse'); library('esquisse')
if (!require('gapminder')) install.packages('gapminder'); library('gapminder')
if (!require('geomtextpath')) install.packages('geomtextpath'); library('geomtextpath')
if (!require('gghighlight')) install.packages('gghighlight'); library('gghighlight')
if (!require('ggplot2')) install.packages('ggplot2'); library('ggplot2')
if (!require('ggrain')) install.packages('ggrain'); library('ggrain')
if (!require('ggthemes')) install.packages('ggthemes'); library('ggthemes')
if (!require('ggridges')) install.packages('ggridges'); library('ggridges')
if (!require('ggtext')) install.packages('ggtext'); library('ggtext')
if (!require('knitr')) install.packages('knitr'); library('knitr')
if (!require('plotly')) install.packages('plotly'); library('plotly')
if (!require('purrr')) install.packages('purrr'); library('purrr')
if (!require('readr')) install.packages('readr'); library('readr')
if (!require('sjPlot')) install.packages('sjPlot'); library('sjPlot')
if (!require('tidyr')) install.packages('tidyr'); library('tidyr')
if (!require('psych')) install.packages('psych'); library('psych')
if (!require('ggpubr')) install.packages('ggpubr'); library('ggpubr')
if (!require('rstatix')) install.packages('rstatix'); library('rstatix')
if (!require('devtools')) install.packages('devtools'); library('devtools')
# Para ggResidpanel desde GitHub
if (!require('ggResidpanel')) {
devtools::install_github('goodekat/ggResidpanel')
library('ggResidpanel')
}
if (!require('afex')) install.packages('afex'); library('afex')
if (!require('correlation')) install.packages('correlation'); library('correlation')
if (!require('corrr')) install.packages('corrr'); library('corrr')
if (!require('gtsummary')) install.packages('gtsummary'); library('gtsummary')
if (!require('haven')) install.packages('haven'); library('haven')
if (!require('inspectdf')) install.packages('inspectdf'); library('inspectdf')
if (!require('lme4')) install.packages('lme4'); library('lme4')
if (!require('papaja')) install.packages('papaja'); library('papaja')
if (!require('parameters')) install.packages('parameters'); library('parameters')
if (!require('performance')) install.packages('performance'); library('performance')
if (!require('report')) install.packages('report'); library('report')
# Chunk 2: setup
# knitr::opts_chunk$set(echo = TRUE)
# DEBUG
# Makes sure all libraries and functions are available to work interactivelly
# targets::tar_load_globals() # Loads all libraries
# Loads DF_analysis
targets::tar_load(DF_analysis)
#HELLO WORLD
# In this document you will find a template to run analysis, plots, and tables
# You will need to adapt to the contents of your DF_analysis
# names(DF_analysis$DF_analysis) # Show variable names in DF_analysis
# Chunk 3: data-preparation
DF =
DF_analysis$DF_analysis %>%
# Update with your variable names
select(id, ends_with("_DIRd"), ends_with("_DIRt"))
# Continue your data preparation, if needed
#   filter() %>%
#   drop_na()
df= DF
# Chunk 4: descriptive-table
# You can add a variable to the `by` argument and uncomment
# names(DF) shows the variables you hava available
table1 <- DF %>%
select(-c(Goodbye_DIRt, id, Consent_DIRt)) %>%
gtsummary::tbl_summary(
type = list(everything() ~ "continuous")
)
table1
# Chunk 5: plots
# Remember to change the variables in your plot
scatterplot = ggplot(df, aes(MDDF_DisgustoMoralDumbfounding_DIRd, CRS_Ideologica_DIRd)) +
geom_point() +
geom_smooth(method  = "lm") + labs(
title = "Fit Regression", x = 'Moral Dumbfounding',
y = 'Ideological CRS'
)
plot2 <- ggplot(df, aes(MDDF_DisgustoMoralDumbfounding_DIRd, , fill = "PuBuGn")) +
geom_histogram(, bins = 7, alpha = .5) +
guides(fill = 'none') +
labs(x = "Disgusto Moral Dumbfounding",
y ='Frecuencia', title ='Distribución')
plot3 <- ggplot(df, aes(CRS_Ideologica_DIRd, , fill = "YIOrRd")) +
geom_histogram(, bins = 7, alpha = .5) +
guides(fill = 'none') +
labs(x = "Ideological",
y ='Frecuencia', title ='Distribución')
# Define marginal histogram
marginal_distribution <- function(x, var) {
ggplot(x, aes(x = get(var), fill = "YIOrRd")) +
geom_histogram(bins = 7, alpha = 0.4) +
# geom_density(alpha = 0.4, size = 0.1) +
guides(fill = "none") +
theme_void() +
theme(plot.margin = margin())
}
# Set up marginal histograms
x_hist <- marginal_distribution(df, "MDDF_DisgustoMoralDumbfounding_DIRd")
y_hist <- marginal_distribution(df, "CRS_Ideologica_DIRd") +
coord_flip()
# Align histograms with scatterplot
aligned_x_hist <- align_plots(x_hist, scatterplot, align = "v")[[1]]
aligned_y_hist <- align_plots(y_hist, scatterplot, align = "h")[[1]]
# Arrange plots
cowplot::plot_grid(
aligned_x_hist, NULL, scatterplot, aligned_y_hist,
ncol = 2, nrow = 2,
rel_heights = c(0.2, 1), rel_widths = c(1, 0.2)
)
# Chunk 6: analysis
# Remember to change the variables used in your model and inline_text
fit <- lm(MDDF_DisgustoMoralDumbfounding_DIRd ~ CRS_Ideologica_DIRd, data = df)
table_1 <- gtsummary::tbl_regression(fit, intercept = TRUE) %>%
add_global_p() %>%
bold_labels() %>%
italicize_labels() %>%
add_glance_source_note(include = c("nobs", "df.residual", "r.squared", "adj.r.squared", "statistic", "p.value"))
table_1
# report::report(model1)
paste0("CRS_Ideological was not a significant predictor of EAR",
", beta = ",
gtsummary::inline_text(table_1, variable = CRS_Ideologica_DIRd))
# Chunk 7
resid_panel(fit)
targets::tar_make()
git config --global user.email "recart.emilioz@gmail.com"
targets::tar_make()
targets::tar_make()
# DEBUG
# Makes sure all libraries and functions are available to work interactivelly
targets::tar_load_globals() # Loads all libraries
targets::tar_load_globals()
# knitr::opts_chunk$set(echo = TRUE)
# DEBUG
# Makes sure all libraries and functions are available to work interactivelly
targets::tar_load_globals() # Loads all libraries
targets::tar_make()
targets::tar_make()
# DEBUG
# Makes sure all libraries and functions are available to work interactivelly
targets::tar_load_globals() # Loads all libraries
targets::tar_load_globals() # Loads all libraries
targets::tar_load_globals() # Loads all libraries
use_git_remote("origin", url = NULL, overwrite =
TRUE)
targets::tar_load_globals() # Loads all libraries
targets::tar_load_globals() # Loads all libraries
targets::tar_make()
targets::tar_make()
targets::tar_load_globals() # Loads all libraries
targets::tar_make()
gitcreds::gitcreds_set()
targets::tar_make()
targets::tar_load_globals() # Loads all libraries
use_git_remote("origin", url = NULL, overwrite =
TRUE)
usethis::use_git_remote("origin", url = NULL, overwrite =
TRUE)
targets::tar_load_globals() # Loads all libraries
# Run data preparation
targets::tar_make()
# Visualize targets tree
targets::tar_visnetwork(targets_only = TRUE, label = "time")
# Visualize targets tree
targets::tar_visnetwork(targets_only = TRUE, label = "time")
# Visualize targets tree
targets::tar_visnetwork(targets_only = TRUE, label = "time")
# Run data preparation
targets::tar_make()
# Run data preparation
targets::tar_make()
# Run data preparation
targets::tar_make()
# Run data preparation
targets::tar_make()
targets::tar_make()
